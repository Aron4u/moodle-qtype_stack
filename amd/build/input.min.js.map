{"version":3,"sources":["../src/input.js"],"names":["define","Ajax","CustomEvents","localizeToLocale","string","replace","localizeToMathJaxLocale","localizeFromLocaleToEnglish","StackInput","validationDiv","prefix","qaid","name","input","TYPING_DELAY","delayTimeoutHandle","validationResults","lastValidatedValue","getInputValue","cancelTypingDelay","clearTimeout","addEventHandlers","valueChanging","showWaiting","setTimeout","valueChanged","checkNoChange","classList","remove","showValidationResults","validateInput","call","methodname","args","done","response","validationReceived","fail","showValidationFailure","showLoading","getValue","status","extractScripts","html","scriptCommands","scriptregexp","result","exec","push","val","results","innerHTML","message","i","length","eval","removeAllClasses","add","notifyFilterContentUpdated","StackSimpleInput","addEventListener","shadowinput","parentElement","querySelector","orgname","value","transform","getValueOrg","StackTextareaInput","textarea","raw","split","join","StackRadioInput","container","selected","StackCheckboxInput","querySelectorAll","StackMatrixInput","idPrefix","numcol","numrow","forEach","element","slice","createShadowElement","bits","substring","Math","max","parseInt","values","Array","endsWith","initInputs","questionDivId","inputs","decsep","window","MathJax","Hub","Register","MessageHook","script","getJaxFor","SourceElement","Localization","locale","translated","text","Update","questionDiv","document","getElementById","allok","initInput","contains","hidden","inputTypeHandler","getInputTypeHandler","createElement","type","appendChild","orgid","id","orgvalue","nodeName","closest","matrix"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle the real-time validation of the input the student types\n * into STACK questions.\n *\n * The overall way this works is as follows:\n *\n *  - right at the end of this file are the init methods, which set things up.\n *  - The work common to all input types is done by StackInput.\n *     - Sending the Ajax request.\n *     - Updating the validation display.\n *  - The work specific to different input types (getting the content of the inputs) is done by\n *    the classes like\n *     - StackSimpleInput\n *     - StackTextareaInput\n *     - StackMatrixInput\n *    objects of these types need to implement the two methods addEventHandlers and getValue().\n *\n * @package    qtype_stack\n * @copyright  2018 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n define([\n    'core/ajax',\n    'core/event'\n], function(\n    Ajax,\n    CustomEvents\n) {\n\n    \"use strict\";\n    function localizeToLocale(string){\n        return string.replace(/,/g,';').replace(/\\./g,',');\n    }\n    function localizeToMathJaxLocale(string){\n        return string.replace(/,/g,';').replace(/\\./g,'{,}');\n    }\n    function localizeFromLocaleToEnglish(string){\n        return string.replace(/,/g,'.').replace(/;/g,',');\n    }\n\n    /**\n     * Class constructor representing an input in a Stack question.\n     *\n     * @constructor\n     * @param {HTMLElement} validationDiv The div to display the validation in.\n     * @param {String} prefix prefix added to the input name to get HTML ids.\n     * @param {String} qaid id of the question_attempt.\n     * @param {String} name the name of the input we are validating.\n     * @param {Object} input An object representing the input element for this input.\n     */\n    function StackInput(validationDiv, prefix, qaid, name, input) {\n        // console.log('StackInput:',input)\n        /** @type {number} delay between the user stopping typing, and the ajax request being sent. */\n        var TYPING_DELAY = 1000;\n\n        /** @type {?int} if not null, the id of the timer for the typing delay. */\n        var delayTimeoutHandle = null;\n\n        /** @type {Object} cache of validation results we have already received. */\n        var validationResults = {};\n\n        /** @type {String} the last value that we sent to be validated. */\n        var lastValidatedValue = getInputValue();\n\n        /**\n         * Cancel any typing pause timer.\n         */\n        function cancelTypingDelay() {\n            if (delayTimeoutHandle) {\n                clearTimeout(delayTimeoutHandle);\n            }\n            delayTimeoutHandle = null;\n        }\n\n        input.addEventHandlers(valueChanging);\n\n        /**\n         * Called when the input contents changes. Will validate after TYPING_DELAY if nothing else happens.\n         */\n        function valueChanging() {\n            cancelTypingDelay();\n            showWaiting();\n            delayTimeoutHandle = setTimeout(valueChanged, TYPING_DELAY);\n            setTimeout(function() {\n                checkNoChange();\n            }, 0);\n        }\n\n        /**\n         * After a small delay, detect the case where the user has got the input back\n         * to where they started, so no validation is necessary.\n         */\n        function checkNoChange() {\n            if (getInputValue() === lastValidatedValue) {\n                cancelTypingDelay();\n                validationDiv.classList.remove('waiting');\n            }\n        }\n\n        /**\n         * Called to actually validate the input now.\n         */\n        function valueChanged() {\n            cancelTypingDelay();\n            if (!showValidationResults()) {\n                validateInput();\n            }\n        }\n\n        /**\n         * Make an ajax call to validate the input.\n         */\n        function validateInput() {\n            Ajax.call([{\n                methodname: 'qtype_stack_validate_input',\n                args: {qaid: qaid, name: name, input: getInputValue()},\n                done: function(response) {\n                    validationReceived(response);\n                },\n                fail: function(response) {\n                    showValidationFailure(response);\n                }\n            }]);\n            showLoading();\n        }\n\n        /**\n         * Returns the current value of the input.\n         *\n         * @return {String}.\n         */\n        function getInputValue() {\n            // console.log(input.getValue)\n            return input.getValue();\n        }\n\n        /**\n         * Update the validation div to show the results of the validation.\n         *\n         * @param {Object} response The data that came back from the ajax validation call.\n         */\n        function validationReceived(response) {\n            if (response.status === 'invalid') {\n                showValidationFailure(response);\n                return;\n            }\n            validationResults[response.input] = response;\n            showValidationResults();\n        }\n\n        /**\n         * Some browsers cannot execute JavaScript just by inserting script tags.\n         * To avoid that problem, remove all script tags from the given content,\n         * and run them later.\n         *\n         * @param {String} html HTML content\n         * @param {Array} scriptCommands An array of script tags for later use.\n         * @return {String} HTML with JS removed\n         */\n        function extractScripts(html, scriptCommands) {\n            var scriptregexp = /<script[^>]*>([\\s\\S]*?)<\\/script>/g;\n            var result;\n            while ((result = scriptregexp.exec(html)) !== null) {\n                scriptCommands.push(result[1]);\n            }\n            return html.replace(scriptregexp, '');\n        }\n\n        /**\n         * Update the validation div to show the results of the validation.\n         *\n         * @return {boolean} true if we could show the validation. false we we are we don't have it.\n         */\n        function showValidationResults() {\n            /* eslint no-eval: \"off\" */\n            var val = getInputValue();\n            if (!validationResults[val]) {\n                showWaiting();\n                return false;\n            }\n            var results = validationResults[val];\n            lastValidatedValue = val;\n            var scriptCommands = [];\n            validationDiv.innerHTML = extractScripts(results.message, scriptCommands);\n            // Run script commands.\n            for (var i = 0; i < scriptCommands.length; i++) {\n                eval(scriptCommands[i]);\n            }\n            removeAllClasses();\n            if (!results.message) {\n                validationDiv.classList.add('empty');\n            }\n            // This fires the Maths filters for content in the validation div.\n            CustomEvents.notifyFilterContentUpdated(validationDiv);\n            return true;\n        }\n\n        /**\n         * Update the validation div after an ajax validation call failed.\n         *\n         * @param {Object} response The data that came back from the ajax validation call.\n         */\n        function showValidationFailure(response) {\n            lastValidatedValue = '';\n            // Reponse usually contains backtrace, debuginfo, errorcode, link, message and moreinfourl.\n            validationDiv.innerHTML = response.message;\n            removeAllClasses();\n            validationDiv.classList.add('error');\n            // This fires the Maths filters for content in the validation div.\n            CustomEvents.notifyFilterContentUpdated(validationDiv);\n        }\n\n        /**\n         * Display the loader icon.\n         */\n        function showLoading() {\n            removeAllClasses();\n            validationDiv.classList.add('loading');\n        }\n\n        /**\n         * Update the validation div to show that the input contents have changed,\n         * so the validation results are no longer relevant.\n         */\n        function showWaiting() {\n            removeAllClasses();\n            validationDiv.classList.add('waiting');\n        }\n\n        /**\n         * Strip all our class names from the validation div.\n         */\n        function removeAllClasses() {\n            validationDiv.classList.remove('empty');\n            validationDiv.classList.remove('error');\n            validationDiv.classList.remove('loading');\n            validationDiv.classList.remove('waiting');\n        }\n    }\n\n    /**\n     * Input type for inputs that are a single input or select.\n     *\n     * @constructor\n     * @param {HTMLElement} input the HTML input that is this STACK input.\n     */\n    function StackSimpleInput(input) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            input.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            let shadowinput =   input.parentElement.querySelector( '[name=\"' + input.orgname + '\"]' );\n            if(shadowinput){\n                shadowinput.value = this.transform();\n                return shadowinput.value;\n            }\n            return this.getValueOrg();\n        };\n\n        this.getValueOrg = function(){\n            return input.value\n            .replace(/^\\s+|\\s+$/g, '');\n        };\n\n        this.transform = function(){\n            return localizeFromLocaleToEnglish(this.getValueOrg());\n        };\n    }\n\n    /**\n     * Input type for textarea inputs.\n     *\n     * @constructor\n     * @param {Object} textarea The input element wrapped in jquery.\n     */\n    function StackTextareaInput(textarea) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            textarea.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var raw = textarea.value.replace(/^\\s+|\\s+$/g, '');\n            // Using <br> here is weird, but it gets sorted out at the PHP end.\n            return raw.split(/\\s*[\\r\\n]\\s*/).join('<br>');\n        };\n    }\n\n    /**\n     * Input type for inputs that are a set of radio buttons.\n     *\n     * @constructor\n     * @param {HTMLElement} container container <div> of this input.\n     */\n    function StackRadioInput(container) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var selected = container.querySelector(':checked');\n            if (selected) {\n                return selected.value;\n            } else {\n                return '';\n            }\n        };\n    }\n\n    /**\n     * Input type for inputs that are a set of checkboxes.\n     *\n     * @constructor\n     * @param {HTMLElement} container container <div> of this input.\n     */\n    function StackCheckboxInput(container) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var selected = container.querySelectorAll(':checked');\n            var result = [];\n            for (var i = 0; i < selected.length; i++) {\n                result[i] = selected[i].value;\n            }\n            if (result.length > 0) {\n                return result.join(',');\n            } else {\n                return '';\n            }\n        };\n    }\n\n    /**\n     * Class constructor representing matrix inputs (one input).\n     *\n     * @constructor\n     * @param {String} idPrefix input id, which is the start of the id of all the different text boxes.\n     * @param {HTMLElement} container <div> of this input.\n     */\n    function StackMatrixInput(idPrefix, container) {\n        var numcol = 0;\n        var numrow = 0;\n        container.querySelectorAll('input[type=text]').forEach(function(element) {\n\n            if (element.name.slice(0, idPrefix.length + 5) !== idPrefix + '_sub_') {\n                return;\n            }\n\n            createShadowElement(element);\n\n            var bits = element.name.substring(idPrefix.length + 5).split('_');\n            numrow = Math.max(numrow, parseInt(bits[0], 10) + 1);\n            numcol = Math.max(numcol, parseInt(bits[1], 10) + 1);\n        });\n\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var values = new Array(numrow);\n            for (var i = 0; i < numrow; i++) {\n                values[i] = new Array(numcol);\n            }\n            container.querySelectorAll('input[type=text]').forEach(function(element) {\n                if (element.name.slice(0, idPrefix.length + 5) !== idPrefix + '_sub_') {\n                    return;\n                }\n                if(element.name.endsWith('_translate')){\n                    let shadowinput =   element.parentElement.querySelector( '[name=\"' + element.orgname + '\"]' );\n                    if(shadowinput){\n                        shadowinput.value = localizeFromLocaleToEnglish(element.value.replace(/^\\s+|\\s+$/g, ''));\n                    }\n\n                    var bits = shadowinput.name.substring(idPrefix.length + 5).split('_');\n                    values[bits[0]][bits[1]] = shadowinput.value.replace(/^\\s+|\\s+$/g, '');\n                }\n            });\n            return 'matrix([' + values.join('],[') + '])';\n        };\n    }\n\n    /**\n     * Initialise all the inputs in a STACK question.\n     *\n     * @param {String} questionDivId id of the outer dic of the question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} qaid Moodle question_attempt id.\n     * @param {String[]} inputs names of all the inputs that should have instant validation.\n     */\n    function initInputs(questionDivId, prefix, qaid, inputs, decsep) {\n        if(window.MathJax){\n            MathJax.Hub.Register.MessageHook(\"New Math Pending\", function (message) {\n                let script = MathJax.Hub.getJaxFor(message[1]).SourceElement();\n                // console.log((message.join(\"::\")+\" : '\"+script.text+\"'\"))\n                if(MathJax.Localization.locale ===\"de\" && !script.translated){\n                    script.translated=true;\n                    script.text = localizeToMathJaxLocale(script.text) + \"%\"; // % for fixing firefox by chaning the not changed text\n                    MathJax.Hub.Update(script);\n                }\n            });\n        }\n\n        var questionDiv = document.getElementById(questionDivId);\n\n        // Initialise all inputs.\n        var allok = true;\n        for (var i = 0; i < inputs.length; i++) {\n            allok = initInput(questionDiv, prefix, qaid, inputs[i], decsep) && allok;\n        }\n\n        // With JS With instant validation, we don't need the Check button, so hide it.\n        if (allok && (questionDiv.classList.contains('dfexplicitvaildate') ||\n                questionDiv.classList.contains('dfcbmexplicitvaildate'))) {\n            questionDiv.querySelector('.im-controls input.submit').hidden = true;\n        }\n    }\n\n    /**\n     * Initialise one input.\n     *\n     * @param {HTMLElement} questionDiv outer <div> of this question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} qaid Moodle question_attempt id.\n     * @param {String} name the input to initialise.\n     * @return {boolean} true if this input was successfully initialised, else false.\n     */\n    function initInput(questionDiv, prefix, qaid, name, decsep) {\n        var validationDiv = document.getElementById(prefix + name + '_val');\n        if (!validationDiv) {\n            return false;\n        }\n\n        var inputTypeHandler = getInputTypeHandler(questionDiv, prefix, name,decsep);\n        if (inputTypeHandler) {\n            new StackInput(validationDiv, prefix, qaid, name, inputTypeHandler);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createShadowElement(input){\n        let element = document.createElement('input');\n        element.type = input.type;\n        element.hidden = true;\n        input.parentElement.appendChild(element);\n        input.orgname = input.name;\n        input.orgid = input.id;\n        input.orgvalue = input.value;\n        input.value = localizeToLocale(input.orgvalue);\n        element.id = input.id;\n        element.value = input.value;\n        element.name = input.name;\n        input.id = input.id + \"_translate\";\n        input.name = input.name + \"_translate\";\n    }\n\n    /**\n     * Get the input type handler for a named input.\n     *\n     * @param {HTMLElement} questionDiv outer <div> of this question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} name the input to initialise.\n     * @return {?Object} the input hander, if we can handle it, else null.\n     */\n    function getInputTypeHandler(questionDiv, prefix, name,decsep) {\n        // See if it is an ordinary input.\n        let input = questionDiv.querySelector('[name=\"' + prefix + name + '\"]');\n\n        if (input) {\n            if(decsep === ','){\n                createShadowElement(input);\n            }\n            if (input.nodeName === 'TEXTAREA') {\n                return new StackTextareaInput(input);\n            } else if (input.type === 'radio') {\n                return new StackRadioInput(input.closest('.answer'));\n            } else {\n                return new StackSimpleInput(input);\n            }\n        }\n\n        // See if it is a checkbox input.\n        input = questionDiv.querySelector('[name=\"' + prefix + name + '_1\"]');\n        if (input && input.type === 'checkbox') {\n            return new StackCheckboxInput(input.closest('.answer'));\n        }\n\n        // See if it is a matrix input.\n        var matrix = document.getElementById(prefix + name + '_container');\n        if (matrix) {\n            return new StackMatrixInput(prefix + name, matrix);\n        }\n\n        return null;\n    }\n\n    /** Export our entry point. */\n    return {\n        /**\n         * Initialise all the inputs in a STACK question.\n         *\n         * @param {String} questionDivId id of the outer dic of the question.\n         * @param {String} prefix prefix added to the input names for this question.\n         * @param {String} qaid Moodle question_attempt id.\n         * @param {String[]} inputs names of all the inputs that should have instant validation.\n         */\n        initInputs: initInputs\n    };\n});\n"],"file":"input.min.js"}